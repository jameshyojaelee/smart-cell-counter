import Foundation
import PDFKit
import UIKit

public enum PDFExport {
    public static func makeReport(
        project: String?,
        operatorName: String?,
        timestamp: Date,
        original: UIImage?,
        corrected: UIImage?,
        overlay: UIImage?,
        perSquareTable: [[Int]],
        formulas: [String],
        parameters: [String: String],
        watermark: Bool
    ) -> Data {
        let pdf = PDFDocument()
        let page = PDFPage()
        pdf.insert(page!, at: 0)
        let renderer = UIGraphicsPDFRenderer(bounds: CGRect(x: 0, y: 0, width: 612, height: 792))
        let data = renderer.pdfData { ctx in
            ctx.beginPage()
            let margin: CGFloat = 24
            var y: CGFloat = margin
            draw(text: "Smart Cell Counter Report", at: CGPoint(x: margin, y: y), font: .boldSystemFont(ofSize: 20))
            y += 28
            draw(text: "Project: \(project ?? "-")", at: CGPoint(x: margin, y: y), font: .systemFont(ofSize: 12))
            y += 16
            draw(text: "Operator: \(operatorName ?? "-")", at: CGPoint(x: margin, y: y), font: .systemFont(ofSize: 12))
            y += 16
            let df = DateFormatter(); df.dateStyle = .medium; df.timeStyle = .short
            draw(text: "Timestamp: \(df.string(from: timestamp))", at: CGPoint(x: margin, y: y), font: .systemFont(ofSize: 12))
            y += 20

            let images = [("Original", original), ("Corrected", corrected), ("Overlay", overlay)]
            for (label, img) in images {
                if let img = img {
                    draw(text: label, at: CGPoint(x: margin, y: y), font: .boldSystemFont(ofSize: 14))
                    y += 16
                    let w: CGFloat = 180; let h: CGFloat = 180
                    img.draw(in: CGRect(x: margin, y: y, width: w, height: h))
                    y += h + 12
                }
            }

            // Per-square table
            draw(text: "Per-Square Counts", at: CGPoint(x: margin, y: y), font: .boldSystemFont(ofSize: 14))
            y += 16
            for row in perSquareTable {
                draw(text: row.map(String.init).joined(separator: ", "), at: CGPoint(x: margin, y: y), font: .monospacedSystemFont(ofSize: 10, weight: .regular))
                y += 14
            }
            y += 8
            draw(text: "Formulas", at: CGPoint(x: margin, y: y), font: .boldSystemFont(ofSize: 14))
            y += 16
            for f in formulas { draw(text: "â€¢ \(f)", at: CGPoint(x: margin, y: y), font: .systemFont(ofSize: 12)); y += 14 }
            y += 8
            draw(text: "Parameters", at: CGPoint(x: margin, y: y), font: .boldSystemFont(ofSize: 14))
            y += 16
            for (k,v) in parameters { draw(text: "\(k): \(v)", at: CGPoint(x: margin, y: y), font: .systemFont(ofSize: 12)); y += 14 }

            if watermark {
                let attr: [NSAttributedString.Key: Any] = [
                    .font: UIFont.boldSystemFont(ofSize: 48),
                    .foregroundColor: UIColor(red: 0, green: 0, blue: 0, alpha: 0.08)
                ]
                let str = NSAttributedString(string: "Generated by Smart Cell Counter", attributes: attr)
                let size = str.size()
                str.draw(at: CGPoint(x: (612 - size.width)/2, y: 792/2))
            }
        }
        return data
    }

    private static func draw(text: String, at point: CGPoint, font: UIFont) {
        let attrs: [NSAttributedString.Key: Any] = [.font: font, .foregroundColor: UIColor.black]
        (text as NSString).draw(at: point, withAttributes: attrs)
    }
}
